package test.com.harrycodeman.compression.colorspaces;

import com.harrycodeman.compression.colorspaces.SquareMatrix;
import org.junit.Test;

import static com.harrycodeman.compression.colorspaces.DctMatrices.DCT_TABLE;
import static junit.framework.Assert.assertEquals;

public class MatrixOperationsTest {
    @Test
    public void testMatrixMultiply() throws Exception {
        assertEquals(
                new SquareMatrix(8,
                        82.0243656,         84.852792,          87.6812184,         90.5096448,         93.3380712,         96.1664976,         98.994924,          101.8233504,
                        -51.5385,           -51.5384984,        -51.5384968,        -51.5384952,        -51.5384936,        -51.538492,         -51.5384904,        -51.5384888,
                        8.1199999996784E-5, 8.4000000001083E-5, 8.6800000005383E-5, 8.9600000002577E-5, 9.2399999996218E-5, 9.520000000407E-5,  9.8000000004816E-5, 0.0001007999999949,
                        -5.3875824,         -5.3875808,         -5.3875792,         -5.3875776,         -5.387576,          -5.3875744,         -5.3875728,         -5.3875712,
                        3.4800000001667E-5, 3.6000000001479E-5, 3.7199999997739E-5, 3.8400000001104E-5, 3.9600000000917E-5, 4.0800000000729E-5, 4.2000000000542E-5, 4.3199999996801E-5,
                        -1.6071808,         -1.6071792,         -1.6071776,         -1.607176,          -1.6071744,         -1.6071728,         -1.6071712,         -1.6071696,
                        8.1200000000337E-5, 8.4000000001083E-5, 8.6800000000054E-5, 8.9600000004353E-5, 9.2400000003323E-5, 9.5200000000517E-5, 9.7999999999487E-5, 0.00010080000000023,
                        -0.4055616,         -0.40556,           -0.4055584,         -0.4055568,         -0.4055552,         -0.4055536,         -0.405552,          -0.4055504
                ),
                DCT_TABLE.multiply(
                        new SquareMatrix(8,
                                1,  2,  3,  4,  5,  6,  7,  8,
                                9,  10, 11, 12, 13, 14, 15, 16,
                                17, 18, 19, 20, 21, 22, 23, 24,
                                25, 26, 27, 28, 29, 30, 31, 32,
                                33, 34, 35, 36, 37, 38, 39, 40,
                                41, 42, 43, 44, 45, 46, 47, 48,
                                49, 50, 51, 52, 53, 54, 55, 56,
                                57, 58, 59, 60, 61, 62, 63, 64
                        )
                )
        );
    }

    @Test
    public void testMatrixDivideByElement() throws Exception {
        assertEquals(
                new SquareMatrix(8,
                        1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1,
                        1, 1, 1, 1, 1, 1, 1, 1
                ),
                new SquareMatrix(8,
                        1,  2,  3,  4,  5,  6,  7,  8,
                        9,  10, 11, 12, 13, 14, 15, 16,
                        17, 18, 19, 20, 21, 22, 23, 24,
                        25, 26, 27, 28, 29, 30, 31, 32,
                        33, 34, 35, 36, 37, 38, 39, 40,
                        41, 42, 43, 44, 45, 46, 47, 48,
                        49, 50, 51, 52, 53, 54, 55, 56,
                        57, 58, 59, 60, 61, 62, 63, 64
                ).divideByElement(
                    new SquareMatrix(8,
                            1,  2,  3,  4,  5,  6,  7,  8,
                            9,  10, 11, 12, 13, 14, 15, 16,
                            17, 18, 19, 20, 21, 22, 23, 24,
                            25, 26, 27, 28, 29, 30, 31, 32,
                            33, 34, 35, 36, 37, 38, 39, 40,
                            41, 42, 43, 44, 45, 46, 47, 48,
                            49, 50, 51, 52, 53, 54, 55, 56,
                            57, 58, 59, 60, 61, 62, 63, 64
                    )
                )
        );
    }
}
